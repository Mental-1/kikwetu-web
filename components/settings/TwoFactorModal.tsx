'use client';

import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Copy, Eye, EyeOff, Check, Shield, AlertCircle } from 'lucide-react';
import { cn } from '@/lib/utils';
import { showToast } from '@/utils/toast';

interface TwoFactorModalProps {
  isOpen: boolean;
  onClose: () => void;
  onComplete: (verified: boolean) => void;
}

export default function TwoFactorModal({ isOpen, onClose, onComplete }: TwoFactorModalProps) {
  const [step, setStep] = useState<'setup' | 'verify'>('setup');
  const [totpSecretVisible, setTotpSecretVisible] = useState(false);
  const [copied, setCopied] = useState(false);
  const [verificationCode, setVerificationCode] = useState('');
  const [isVerifying, setIsVerifying] = useState(false);

  // Mock TOTP secret - In production, this would come from the backend
  const totpSecret = 'JBSWY3DPEHPK3PXP';
  const formattedSecret = totpSecret.match(/.{1,4}/g)?.join(' ') || totpSecret;

  // Mock QR code data - In production, this would be generated by the backend
  const qrCodeData = `otpauth://totp/Kikwetu:user@example.com?secret=${totpSecret}&issuer=Kikwetu`;

  const handleCopySecret = async () => {
    try {
      await navigator.clipboard.writeText(totpSecret);
      setCopied(true);
      showToast.success('Copied!', 'TOTP secret copied to clipboard');
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      showToast.error('Copy Failed', 'Failed to copy secret to clipboard');
    }
  };

  const handleVerify = async () => {
    if (verificationCode.length !== 6) {
      showToast.error('Invalid Code', 'Please enter a 6-digit verification code');
      return;
    }

    setIsVerifying(true);
    
    // TODO: Implement actual verification API call
    // Simulate API call
    await new Promise((resolve) => setTimeout(resolve, 1500));

    // Mock verification - accept any 6-digit code for demo
    const isValid = verificationCode.length === 6 && /^\d+$/.test(verificationCode);
    
    setIsVerifying(false);

    if (isValid) {
      showToast.success('Verification Successful', 'Two-factor authentication has been enabled');
      onComplete(true);
      handleClose();
    } else {
      showToast.error('Verification Failed', 'Invalid verification code. Please try again.');
    }
  };

  const handleClose = () => {
    setStep('setup');
    setTotpSecretVisible(false);
    setCopied(false);
    setVerificationCode('');
    setIsVerifying(false);
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <div className="flex items-center gap-3 mb-2">
            <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
              <Shield className="w-5 h-5 text-blue-600" />
            </div>
            <div>
              <DialogTitle className="text-xl font-bold text-gray-900">
                Enable Two-Factor Authentication
              </DialogTitle>
              <DialogDescription className="text-gray-600">
                {step === 'setup'
                  ? 'Scan the QR code and save your recovery code'
                  : 'Enter the code from your authenticator app'}
              </DialogDescription>
            </div>
          </div>
        </DialogHeader>

        {step === 'setup' ? (
          <div className="space-y-6 mt-4">
            {/* Step 1: QR Code */}
            <div>
              <h3 className="text-sm font-semibold text-gray-900 mb-3">
                Step 1: Scan QR Code
              </h3>
              <div className="flex flex-col items-center p-6 bg-gray-50 rounded-lg border border-gray-200">
                {/* QR Code Placeholder - In production, use a QR code library */}
                <div className="w-48 h-48 bg-white border-2 border-gray-300 rounded-lg flex items-center justify-center mb-4">
                  <div className="text-center">
                    <div className="w-40 h-40 bg-gray-100 rounded border-2 border-dashed border-gray-300 flex items-center justify-center">
                      <div className="text-xs text-gray-500 text-center px-4">
                        QR Code<br />Placeholder<br />
                        <span className="text-[8px] break-all">{qrCodeData}</span>
                      </div>
                    </div>
                  </div>
                </div>
                <p className="text-sm text-gray-600 text-center">
                  Scan this QR code with your authenticator app (Google Authenticator, Authy, etc.)
                </p>
              </div>
            </div>

            {/* Step 2: Manual Entry */}
            <div>
              <h3 className="text-sm font-semibold text-gray-900 mb-3">
                Step 2: Manual Entry Code
              </h3>
              <div className="p-4 bg-gray-50 rounded-lg border border-gray-200">
                <div className="flex items-center justify-between mb-2">
                  <Label className="text-xs font-medium text-gray-700">
                    Secret Key (TOTP Factor)
                  </Label>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setTotpSecretVisible(!totpSecretVisible)}
                      className="h-7 px-2 text-xs"
                    >
                      {totpSecretVisible ? (
                        <>
                          <EyeOff className="w-3.5 h-3.5 mr-1" />
                          Hide
                        </>
                      ) : (
                        <>
                          <Eye className="w-3.5 h-3.5 mr-1" />
                          Show
                        </>
                      )}
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={handleCopySecret}
                      className="h-7 px-2 text-xs"
                    >
                      {copied ? (
                        <>
                          <Check className="w-3.5 h-3.5 mr-1 text-green-600" />
                          Copied
                        </>
                      ) : (
                        <>
                          <Copy className="w-3.5 h-3.5 mr-1" />
                          Copy
                        </>
                      )}
                    </Button>
                  </div>
                </div>
                <div
                  className={cn(
                    'font-mono text-sm p-3 rounded-md bg-white border border-gray-300 select-all',
                    !totpSecretVisible && 'blur-sm select-none'
                  )}
                >
                  {formattedSecret}
                </div>
                <p className="text-xs text-gray-500 mt-2">
                  {totpSecretVisible
                    ? 'Keep this secret safe. Do not share it with anyone.'
                    : 'Click "Show" to reveal the secret key. Be careful of shoulder surfers.'}
                </p>
              </div>
            </div>

            {/* Instructions */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-start gap-3">
                <AlertCircle className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" />
                <div className="text-sm text-blue-800">
                  <p className="font-medium mb-1">Important:</p>
                  <ul className="list-disc list-inside space-y-1 text-blue-700">
                    <li>Save this secret key in a secure location</li>
                    <li>After enabling 2FA, you'll need your authenticator app to log in</li>
                    <li>You can use backup codes if you lose access to your device</li>
                  </ul>
                </div>
              </div>
            </div>

            {/* Continue Button */}
            <div className="flex gap-3 pt-2">
              <Button variant="outline" onClick={handleClose} className="flex-1">
                Cancel
              </Button>
              <Button
                onClick={() => setStep('verify')}
                className="flex-1 bg-blue-600 hover:bg-blue-700 text-white"
              >
                I've Saved My Code
              </Button>
            </div>
          </div>
        ) : (
          <div className="space-y-6 mt-4">
            {/* Verification Step */}
            <div>
              <h3 className="text-sm font-semibold text-gray-900 mb-3">
                Verify Setup
              </h3>
              <p className="text-sm text-gray-600 mb-4">
                Enter the 6-digit code from your authenticator app to complete the setup.
              </p>
              <div className="space-y-4">
                <div>
                  <Label htmlFor="verificationCode" className="text-gray-900 font-medium">
                    Verification Code
                  </Label>
                  <Input
                    id="verificationCode"
                    type="text"
                    inputMode="numeric"
                    maxLength={6}
                    value={verificationCode}
                    onChange={(e) => {
                      const value = e.target.value.replace(/\D/g, '').slice(0, 6);
                      setVerificationCode(value);
                    }}
                    placeholder="000000"
                    className="mt-1 text-center text-2xl font-mono tracking-widest bg-white border-gray-300"
                  />
                  <p className="text-xs text-gray-500 mt-2">
                    Enter the 6-digit code from your authenticator app
                  </p>
                </div>
              </div>
            </div>

            {/* Back and Verify Buttons */}
            <div className="flex gap-3 pt-2">
              <Button variant="outline" onClick={() => setStep('setup')} className="flex-1">
                Back
              </Button>
              <Button
                onClick={handleVerify}
                disabled={verificationCode.length !== 6 || isVerifying}
                className="flex-1 bg-blue-600 hover:bg-blue-700 text-white disabled:opacity-50"
              >
                {isVerifying ? 'Verifying...' : 'Verify & Enable'}
              </Button>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}

